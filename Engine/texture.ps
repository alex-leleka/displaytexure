////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////
cbuffer PerFrameBufferPs : register(b1)
{
	float4 dirAndTexSize; // xy (direction) zw (texture size)
};

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

static const float offset[] = {0.0, 1.0, 2.0, 3.0, 4.0};
static const float weight[] = {
  0.2270270270, 0.1945945946, 0.1216216216,
  0.0540540541, 0.0162162162
};

float patternOnliTheRightScreenSide(float2 pos)
{
	float xbound = 0.5;
	if (pos.x < xbound)
		return 0.0;
	return 1.0;
}

float patternEllipse(float2 pos)
{
	float dplusR = 0.5;
	float R = 0.15;
	float Rsq = R * R;
	float shift_d = dplusR - R; 
	// denormalize x and y to get circle
	float v = (pos.x - dplusR)*(pos.x - dplusR) + (pos.y - dplusR)*(pos.y - dplusR);
	if (v  > Rsq)
		return 0.0;
	return 1.0;
}
////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	if (patternEllipse(input.tex) == 0.0)
		return shaderTexture.Sample(SampleType, input.tex);
	float4 ppColour = shaderTexture.Sample(SampleType, input.tex) * weight[0];
	float3 FragmentColor = float3(0.0f, 0.0f, 0.0f);

	//(1.0, 0.0) -> horizontal blur
	//(0.0, 1.0) -> vertical blur


	float2 scr_size = dirAndTexSize.zw;

	float hstep = dirAndTexSize.x / scr_size.x;
	float vstep = dirAndTexSize.y / scr_size.y;

	for (int i = 1; i < 5; i++) {
	FragmentColor = FragmentColor +
		shaderTexture.Sample(SampleType, input.tex + float2(hstep*offset[i], vstep*offset[i]))*weight[i] +
		shaderTexture.Sample(SampleType, input.tex - float2(hstep*offset[i], vstep*offset[i]))*weight[i];      
	}
	ppColour = ppColour + float4(FragmentColor,0.0f);
	float4 color = ppColour;
	//return float4(1,0,0,1);
	return color;

}
