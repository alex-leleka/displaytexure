////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////
cbuffer PerFrameBufferPs : register(b1)
{
	float4 dir;
};

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

static const float offset[] = {0.0, 1.0, 2.0, 3.0, 4.0};
static const float weight[] = {
  0.2270270270, 0.1945945946, 0.1216216216,
  0.0540540541, 0.0162162162
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{

	float4 ppColour = shaderTexture.Sample(SampleType, input.tex) * weight[0];
	float3 FragmentColor = float3(0.0f, 0.0f, 0.0f);

	//(1.0, 0.0) -> horizontal blur
	//(0.0, 1.0) -> vertical blur
	float hstep = dir.x;
	float vstep = dir.y;

	for (int i = 1; i < 5; i++) {
	FragmentColor = FragmentColor +
		shaderTexture.Sample(SampleType, input.tex + float2(hstep*offset[i], vstep*offset[i]))*weight[i] +
		shaderTexture.Sample(SampleType, input.tex - float2(hstep*offset[i], vstep*offset[i]))*weight[i];      
	}
	ppColour = ppColour + float4(FragmentColor,0.0f);
	float4 color = ppColour;
	return color;


  // show & blur texture at same time 
	//return shaderTexture.Sample(SampleType, input.tex);
	  // TOP ROW
  float4 s11 = shaderTexture.Sample(SampleType, input.tex + float2(-1.0f / 1024.0f, -1.0f / 768.0f));    // LEFT
  float4 s12 = shaderTexture.Sample(SampleType, input.tex + float2(0, -1.0f / 768.0f));              // MIDDLE
  float4 s13 = shaderTexture.Sample(SampleType, input.tex + float2(1.0f / 1024.0f, -1.0f / 768.0f)); // RIGHT
 
  // MIDDLE ROW
  float4 s21 = shaderTexture.Sample(SampleType, input.tex + float2(-1.0f / 1024.0f, 0));             // LEFT
  float4 col = shaderTexture.Sample(SampleType, input.tex);                                          // DEAD CENTER
  float4 s23 = shaderTexture.Sample(SampleType, input.tex + float2(-1.0f / 1024.0f, 0));                 // RIGHT
 
  // LAST ROW
  float4 s31 = shaderTexture.Sample(SampleType, input.tex + float2(-1.0f / 1024.0f, 1.0f / 768.0f)); // LEFT
  float4 s32 = shaderTexture.Sample(SampleType, input.tex + float2(0, 1.0f / 768.0f));                   // MIDDLE
  float4 s33 = shaderTexture.Sample(SampleType, input.tex + float2(1.0f / 1024.0f, 1.0f / 768.0f));  // RIGHT
 
  // Average the color with surrounding samples
  col = (col + s11 + s12 + s13 + s21 + s23 + s31 + s32 + s33) / 9;
  return float4(1,0,0,1);//col;
}
