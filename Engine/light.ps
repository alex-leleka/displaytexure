////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D diffuseTexture : register(t0);
Texture2D specularTexture : register(t1);

SamplerState SampleType;

cbuffer LightBuffer
{
    float4 diffuseColor;
    float3 lightDirection;
	//float padding;
	int lightingModel;
};

static const float fAmbientLight = 0.1;
static const float fSkinShininess = 5.2;
static const float fSkinAmbient = 0.2;

struct Material
{
	float4 spec;
	float4 diff;
	float4 amb;
	float shininess;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 h : TEXCOORD1;
	float4 diff : COLOR0;
};

struct MinnaertPixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float4 diff : COLOR0;
};

float4 LambertianPixelShader(PixelInputType input);
float4 BlinnPhongLightPixelShader(PixelInputType input);
float4 MinnaertLightPixelShader(PixelInputType input);
float4 ToonLightPixelShader(PixelInputType input);
////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{

	[forcecase] switch (lightingModel)
	{
	case 0:
		return LambertianPixelShader(input);
	case 1:
		return BlinnPhongLightPixelShader(input);
	case 2:
		return MinnaertLightPixelShader(input);//ToonLightPixelShader(input);// 
	default:
		return float4(1,0,0,1);
	}
		
}

float4 calcBlinnPhongLighting(Material M, float4 LColor, float3 N, float3 L, float3 H)
{
	// Phong relfection is ambient + light-diffuse + spec highlights.
	// I = Ia*ka*Oda + fatt*Ip[kd*Od(N.L) + ks(R.V)^n]
	float4 Ia = M.amb * fAmbientLight;
		float4 Id = M.diff * saturate(dot(N, L));
		float4 Is = M.spec * pow(saturate(dot(N, H)), M.shininess);
		return Ia + (Id + Is) * LColor;
}

float4 LambertianPixelShader(PixelInputType input)
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;


	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = diffuseTexture.Sample(SampleType, input.tex); // diffuseTexture

	// Invert the light direction for calculations.
	lightDir = -lightDirection;

	// Calculate the amount of light on this pixel.
	lightIntensity = saturate(dot(input.normal, lightDir)); //saturate(NdotL)

	// Determine the final amount of diffuse color based on the diffuse color combined with the light intensity.
	color = saturate(diffuseColor * lightIntensity);

	// Multiply the texture pixel and the final diffuse color to get the final pixel color result.
	color = color * textureColor;

	return color;
}

float4 BlinnPhongLightPixelShader(PixelInputType input)
{
	float3 lightDir;

	lightDir = -lightDirection;
	Material mat;
	mat.diff = diffuseTexture.Sample(SampleType, input.tex);
	mat.spec = specularTexture.Sample(SampleType, input.tex);
	mat.amb = fSkinAmbient;
	mat.shininess = fSkinShininess;
	input.normal = normalize(input.normal);
	input.h = normalize(input.h);
	float4 I = calcBlinnPhongLighting(mat, diffuseColor, input.normal, lightDir, input.h);

	return I;
}

float4 MinnaertLightPixelShader(PixelInputType input)
{
	// vertex lighting version
	float4 diff = diffuseTexture.Sample(SampleType, input.tex);
	float4 color = diff * input.diff;
	color.a = 1;
	return color;
}